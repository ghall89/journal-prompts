{"version":3,"sources":["helpers/generatePrompt.js","components/History.jsx","components/Prompt.jsx","components/Footer.jsx","App.jsx","serviceWorkerRegistration.js","index.js"],"names":["generatePrompt","newPrompt","format","Parts","Math","floor","random","length","i","output","push","join","History","props","isOpen","data","modalIsOpen","onRequestClose","closeModal","ariaHideApp","contentLabel","closeTimeoutMS","className","history","slice","reverse","map","item","onClick","icon","faTimes","Prompt","useState","setIsOpen","prompt","setPrompt","localStorage","mindfullnessPrompts","JSON","parse","setHistory","useEffect","setItem","stringify","text","springConfig","presets","wobbly","Footer","href","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"yvcAaeA,EAXQ,WAGtB,IAFA,IAAMC,EAAY,GACZC,EAASC,EAAMC,KAAKC,MAAMD,KAAKE,SAAWH,EAAMI,SAC7CC,EAAI,EAAGA,EAAIN,EAAOK,OAAQC,IAAK,CACvC,IAAMC,EAASP,EAAOM,GAAGJ,KAAKC,MAAMD,KAAKE,SAAWJ,EAAOM,GAAGD,SAC9DN,EAAUS,KAAKD,GAGhB,OAAOR,EAAUU,KAAK,KAAO,O,wCC0BfC,EAhCC,SAAAC,GACf,OACC,8BACC,eAAC,IAAD,CACCC,OAAQD,EAAME,KAAKC,YACnBC,eAAgBJ,EAAME,KAAKG,WAC3BC,aAAa,EACbC,aAAa,iBACbC,eAAgB,IAChBC,UAAU,OANX,UAQC,qBAAKA,UAAU,cAAf,SACC,6BACET,EAAME,KAAKQ,QACVC,MAAM,GACNC,UACAD,MAAM,EAAG,IACTE,KAAI,SAAAC,GAAI,OACR,6BAAyBA,GAAhBvB,KAAKE,iBAIlB,8BACC,wBAAQgB,UAAU,WAAWM,QAASf,EAAME,KAAKG,WAAjD,SACC,cAAC,IAAD,CAAiBW,KAAMC,gB,QCyBdC,EAhDA,WACd,MAAiCC,oBAAS,GAA1C,mBAAOhB,EAAP,KAAoBiB,EAApB,KAEA,EAA4BD,mBAAShC,KAArC,mBAAOkC,EAAP,KAAeC,EAAf,KAEA,EAA8BH,mBAC7BI,aAAaC,oBACVC,KAAKC,MAAMH,aAAaC,qBACxB,IAHJ,mBAAOd,EAAP,KAAgBiB,EAAhB,KAcAC,qBAAU,WACTL,aAAaM,QAAQ,sBAAuBJ,KAAKK,UAAUpB,MACzD,CAACA,IAEJkB,qBAAU,WACTD,EAAW,GAAD,mBAAKjB,GAAL,CAAcW,OACtB,CAACA,IAIJ,OACC,qCACC,sBAAKZ,UAAU,kBAAf,UACC,qBAAKA,UAAU,aAAf,SAEC,cAAC,IAAD,CACCA,UAAU,SACVsB,KAAMV,EACNW,aAAcC,IAAQC,WAGxB,wBAAQnB,QAbU,kBAAMO,EAAUnC,MAalC,wBACA,wBAAQ4B,QA9BO,WACjBK,GAAU,IA6BR,+BAED,cAAC,EAAD,CAASlB,KAAM,CAAEC,cAAaiB,YAAWf,WA5BxB,WAClBe,GAAU,IA2B4CV,iBCtCzCyB,EAVA,WACd,OACC,iCACC,2DACiB,mBAAGC,KAAK,oBAAR,+BCYLC,MAbf,WACC,OACC,sBAAK5B,UAAU,MAAf,UAIC,qDACA,cAAC,EAAD,IACA,cAAC,EAAD,QCCG6B,EAAcC,QACU,cAA7BC,OAAOC,SAASC,UAEc,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACxB,2DAsCH,SAASC,EAAgBC,EAAOC,GAC/BC,UAAUC,cACRC,SAASJ,GACTK,MAAK,SAAAC,GACLA,EAAaC,cAAgB,WAC5B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACD,cAA3BF,EAAiBG,QAChBT,UAAUC,cAAcS,YAI3BC,QAAQC,IACP,+GAKGb,GAAUA,EAAOc,UACpBd,EAAOc,SAAST,KAMjBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACpBf,EAAOe,UAAUV,WAOtBW,OAAM,SAAAC,GACNL,QAAQK,MAAM,4CAA6CA,MCzF9DC,IAASC,OACR,cAAC,IAAMC,WAAP,UACC,cAAC,EAAD,MAEDC,SAASC,eAAe,SDWlB,SAAkBtB,GACxB,GAA6C,kBAAmBC,UAAW,CAG1E,GADkB,IAAIsB,IAAIC,uBAAwB9B,OAAOC,SAASL,MACpDmC,SAAW/B,OAAOC,SAAS8B,OAIxC,OAGD/B,OAAOgC,iBAAiB,QAAQ,WAC/B,IAAM3B,EAAK,UAAMyB,uBAAN,sBAEPhC,IAgEP,SAAiCO,EAAOC,GAEvC2B,MAAM5B,EAAO,CACZ6B,QAAS,CAAE,iBAAkB,YAE5BxB,MAAK,SAAAyB,GAEL,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEpB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5ChC,UAAUC,cAAcgC,MAAM9B,MAAK,SAAAC,GAClCA,EAAa8B,aAAa/B,MAAK,WAC9BV,OAAOC,SAASyC,eAKlBtC,EAAgBC,EAAOC,MAGxBgB,OAAM,WACNJ,QAAQC,IACP,oEAvFAwB,CAAwBtC,EAAOC,GAI/BC,UAAUC,cAAcgC,MAAM9B,MAAK,WAClCQ,QAAQC,IACP,+GAMFf,EAAgBC,EAAOC,OCpC3BsC,K","file":"static/js/main.311c5dc2.chunk.js","sourcesContent":["import Parts from '../data/prompts.json';\n\nconst generatePrompt = () => {\n\tconst newPrompt = [];\n\tconst format = Parts[Math.floor(Math.random() * Parts.length)];\n\tfor (let i = 0; i < format.length; i++) {\n\t\tconst output = format[i][Math.floor(Math.random() * format[i].length)];\n\t\tnewPrompt.push(output);\n\t}\n\n\treturn newPrompt.join(' ') + '...';\n};\n\nexport default generatePrompt;\n","import Modal from 'react-modal';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTimes } from '@fortawesome/free-solid-svg-icons';\n\nconst History = props => {\n\treturn (\n\t\t<div>\n\t\t\t<Modal\n\t\t\t\tisOpen={props.data.modalIsOpen}\n\t\t\t\tonRequestClose={props.data.closeModal}\n\t\t\t\tariaHideApp={false}\n\t\t\t\tcontentLabel=\"Prompt History\"\n\t\t\t\tcloseTimeoutMS={300}\n\t\t\t\tclassName=\"card\"\n\t\t\t>\n\t\t\t\t<div className=\"modalScroll\">\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t{props.data.history\n\t\t\t\t\t\t\t.slice(0)\n\t\t\t\t\t\t\t.reverse()\n\t\t\t\t\t\t\t.slice(0, 15)\n\t\t\t\t\t\t\t.map(item => (\n\t\t\t\t\t\t\t\t<li key={Math.random()}>{item}</li>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t</ul>\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t<button className=\"modalBtn\" onClick={props.data.closeModal}>\n\t\t\t\t\t\t<FontAwesomeIcon icon={faTimes} />\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t</Modal>\n\t\t</div>\n\t);\n};\n\nexport default History;\n","import { useState, useEffect } from 'react';\nimport generatePrompt from '../helpers/generatePrompt';\nimport History from './History.jsx';\nimport TextTransition, { presets } from 'react-text-transition';\n\nconst Prompt = () => {\n\tconst [modalIsOpen, setIsOpen] = useState(false);\n\n\tconst [prompt, setPrompt] = useState(generatePrompt());\n\n\tconst [history, setHistory] = useState(\n\t\tlocalStorage.mindfullnessPrompts\n\t\t\t? JSON.parse(localStorage.mindfullnessPrompts)\n\t\t\t: []\n\t);\n\n\tconst openModal = () => {\n\t\tsetIsOpen(true);\n\t};\n\n\tconst closeModal = () => {\n\t\tsetIsOpen(false);\n\t};\n\n\tuseEffect(() => {\n\t\tlocalStorage.setItem('mindfullnessPrompts', JSON.stringify(history));\n\t}, [history]);\n\n\tuseEffect(() => {\n\t\tsetHistory([...history, prompt]);\n\t}, [prompt]);\n\n\tconst choosePrompt = () => setPrompt(generatePrompt());\n\n\treturn (\n\t\t<>\n\t\t\t<div className=\"promptArea card\">\n\t\t\t\t<div className=\"promptText\">\n\t\t\t\t\t{/* <p>{prompt}</p> */}\n\t\t\t\t\t<TextTransition\n\t\t\t\t\t\tclassName=\"prompt\"\n\t\t\t\t\t\ttext={prompt}\n\t\t\t\t\t\tspringConfig={presets.wobbly}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t<button onClick={choosePrompt}>New Prompt</button>\n\t\t\t\t<button onClick={openModal}>Recent Prompts</button>\n\t\t\t</div>\n\t\t\t<History data={{ modalIsOpen, setIsOpen, closeModal, history }} />\n\t\t</>\n\t);\n};\n\nexport default Prompt;\n","const Footer = () => {\n\treturn (\n\t\t<footer>\n\t\t\t<p>\n\t\t\t\tMade with ❤️ by <a href=\"https://ghall.dev\">Graham Hall</a>\n\t\t\t</p>\n\t\t</footer>\n\t);\n};\n\nexport default Footer;\n","import Prompt from './components/Prompt.jsx';\nimport Footer from './components/Footer.jsx';\n\nfunction App() {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t{/* <div className=\"backdrop\">\n\t\t\t\t<img src=\"https://source.unsplash.com/random?calm\" alt=\"\" />\n\t\t\t</div> */}\n\t\t\t<h1>Mindfulness Prompts</h1>\n\t\t\t<Footer />\n\t\t\t<Prompt />\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n\twindow.location.hostname === 'localhost' ||\n\t\t// [::1] is the IPv6 localhost address.\n\t\twindow.location.hostname === '[::1]' ||\n\t\t// 127.0.0.0/8 are considered localhost for IPv4.\n\t\twindow.location.hostname.match(\n\t\t\t/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n\t\t)\n);\n\nexport function register(config) {\n\tif (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n\t\t// The URL constructor is available in all browsers that support SW.\n\t\tconst publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n\t\tif (publicUrl.origin !== window.location.origin) {\n\t\t\t// Our service worker won't work if PUBLIC_URL is on a different origin\n\t\t\t// from what our page is served on. This might happen if a CDN is used to\n\t\t\t// serve assets; see https://github.com/facebook/create-react-app/issues/2374\n\t\t\treturn;\n\t\t}\n\n\t\twindow.addEventListener('load', () => {\n\t\t\tconst swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n\t\t\tif (isLocalhost) {\n\t\t\t\t// This is running on localhost. Let's check if a service worker still exists or not.\n\t\t\t\tcheckValidServiceWorker(swUrl, config);\n\n\t\t\t\t// Add some additional logging to localhost, pointing developers to the\n\t\t\t\t// service worker/PWA documentation.\n\t\t\t\tnavigator.serviceWorker.ready.then(() => {\n\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t'This web app is being served cache-first by a service ' +\n\t\t\t\t\t\t\t'worker. To learn more, visit https://cra.link/PWA'\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Is not localhost. Just register service worker\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t});\n\t}\n}\n\nfunction registerValidSW(swUrl, config) {\n\tnavigator.serviceWorker\n\t\t.register(swUrl)\n\t\t.then(registration => {\n\t\t\tregistration.onupdatefound = () => {\n\t\t\t\tconst installingWorker = registration.installing;\n\t\t\t\tif (installingWorker == null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tinstallingWorker.onstatechange = () => {\n\t\t\t\t\tif (installingWorker.state === 'installed') {\n\t\t\t\t\t\tif (navigator.serviceWorker.controller) {\n\t\t\t\t\t\t\t// At this point, the updated precached content has been fetched,\n\t\t\t\t\t\t\t// but the previous service worker will still serve the older\n\t\t\t\t\t\t\t// content until all client tabs are closed.\n\t\t\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\t\t'New content is available and will be used when all ' +\n\t\t\t\t\t\t\t\t\t'tabs for this page are closed. See https://cra.link/PWA.'\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onUpdate) {\n\t\t\t\t\t\t\t\tconfig.onUpdate(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// At this point, everything has been precached.\n\t\t\t\t\t\t\t// It's the perfect time to display a\n\t\t\t\t\t\t\t// \"Content is cached for offline use.\" message.\n\t\t\t\t\t\t\tconsole.log('Content is cached for offline use.');\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onSuccess) {\n\t\t\t\t\t\t\t\tconfig.onSuccess(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\t\t})\n\t\t.catch(error => {\n\t\t\tconsole.error('Error during service worker registration:', error);\n\t\t});\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n\t// Check if the service worker can be found. If it can't reload the page.\n\tfetch(swUrl, {\n\t\theaders: { 'Service-Worker': 'script' }\n\t})\n\t\t.then(response => {\n\t\t\t// Ensure service worker exists, and that we really are getting a JS file.\n\t\t\tconst contentType = response.headers.get('content-type');\n\t\t\tif (\n\t\t\t\tresponse.status === 404 ||\n\t\t\t\t(contentType != null && contentType.indexOf('javascript') === -1)\n\t\t\t) {\n\t\t\t\t// No service worker found. Probably a different app. Reload the page.\n\t\t\t\tnavigator.serviceWorker.ready.then(registration => {\n\t\t\t\t\tregistration.unregister().then(() => {\n\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Service worker found. Proceed as normal.\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t})\n\t\t.catch(() => {\n\t\t\tconsole.log(\n\t\t\t\t'No internet connection found. App is running in offline mode.'\n\t\t\t);\n\t\t});\n}\n\nexport function unregister() {\n\tif ('serviceWorker' in navigator) {\n\t\tnavigator.serviceWorker.ready\n\t\t\t.then(registration => {\n\t\t\t\tregistration.unregister();\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tconsole.error(error.message);\n\t\t\t});\n\t}\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './res/App.scss';\nimport App from './App.jsx';\n\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\nserviceWorkerRegistration.register();\n"],"sourceRoot":""}